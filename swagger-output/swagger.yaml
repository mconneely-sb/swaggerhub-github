{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "SwaggerHub Fintech API xyz",
    "description" : "This is a sample Fintech API\n",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "fintechteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/MConneely/FinTechAPI/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "tags" : [ {
    "name" : "fintech",
    "description" : "Everything about your Accounts",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "transaction",
    "description" : "Access to Fintech orders"
  }, {
    "name" : "user",
    "description" : "Operations about user",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://swagger.io"
    }
  } ],
  "paths" : {
    "/account" : {
      "put" : {
        "tags" : [ "account" ],
        "summary" : "Update an existing account",
        "operationId" : "updateAccount",
        "requestBody" : {
          "description" : "Account object that needs to be added",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Account"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Account"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Account not found",
            "content" : { }
          },
          "405" : {
            "description" : "Validation exception",
            "content" : { }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ],
        "x-codegen-request-body-name" : "body"
      },
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Open a new account",
        "operationId" : "openAccount",
        "requestBody" : {
          "description" : "Account object that needs to be opened",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Account"
              }
            },
            "application/xml" : {
              "schema" : {
                "$ref" : "#/components/schemas/Account"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input",
            "content" : { }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ],
        "x-codegen-request-body-name" : "body"
      }
    },
    "/account/findByStatus" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Finds Accounts by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findAccountsByStatus",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "open", "closed", "pending" ],
              "default" : "open"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Account"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value",
            "content" : { }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ]
      }
    },
    "/account/{accountId}" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Find account by ID",
        "description" : "Returns a single account",
        "operationId" : "getAccountById",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "ID of account to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Account not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "account" ],
        "summary" : "Updates a account with form data",
        "operationId" : "updateAccountWithForm",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "ID of account that needs to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/account_accountId_body"
              }
            }
          }
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input",
            "content" : { }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ]
      },
      "delete" : {
        "tags" : [ "account" ],
        "summary" : "Deletes a account",
        "operationId" : "deleteAccount",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accountId",
          "in" : "path",
          "description" : "Account id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Account not found",
            "content" : { }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ]
      }
    },
    "/account/{accountId}/transaction" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Finds transactions by account",
        "description" : "An account can have multiple transactions",
        "operationId" : "findTransactionsByAccount",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "ID of account of the transactions to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Transaction"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid user value",
            "content" : { }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ]
      }
    },
    "/account/{accountId}/uploadImage" : {
      "post" : {
        "tags" : [ "account" ],
        "summary" : "uploads an image for verification",
        "operationId" : "uploadFile",
        "parameters" : [ {
          "name" : "accountId",
          "in" : "path",
          "description" : "ID of account to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/accountId_uploadImage_body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ]
      }
    },
    "/transaction" : {
      "post" : {
        "tags" : [ "transaction" ],
        "summary" : "Create a transaction for an account",
        "operationId" : "createTransaction",
        "requestBody" : {
          "description" : "transaction placed for purchasing the account",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/Transaction"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Transaction",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/transaction/{transactionId}" : {
      "get" : {
        "tags" : [ "transaction" ],
        "summary" : "Find transaction by ID",
        "description" : "For valid response try integer IDs with value >= 1 and <= 1000.\\ \\ Other values will generated exceptions",
        "operationId" : "getTransactionById",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "ID of account that needs to be fetched",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "maximum" : 10,
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Transaction not found",
            "content" : { }
          }
        }
      },
      "delete" : {
        "tags" : [ "transaction" ],
        "summary" : "Delete purchase transaction by ID",
        "description" : "For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors",
        "operationId" : "deleteTransaction",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "ID of the transaction that needs to be deleted",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "minimum" : 1,
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied",
            "content" : { }
          },
          "404" : {
            "description" : "Transaction not found",
            "content" : { }
          }
        }
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "Created user object",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "successful operation",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied",
            "content" : { }
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "description" : "successful operation",
            "content" : { }
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username supplied",
            "content" : { }
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user object",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied",
            "content" : { }
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        },
        "x-codegen-request-body-name" : "body"
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied",
            "content" : { }
          },
          "404" : {
            "description" : "User not found",
            "content" : { }
          }
        }
      }
    },
    "/user/{userId}/accounts" : {
      "get" : {
        "tags" : [ "account" ],
        "summary" : "Finds Accounts by user",
        "description" : "A user can have multiple accounts",
        "operationId" : "findAccountsByUser",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of account to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Account"
                  }
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid user value",
            "content" : { }
          }
        },
        "security" : [ {
          "fintech_auth" : [ "write:accounts", "read:accounts" ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Transaction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "amount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "transactionDate" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "description" : "Transaction Status",
            "enum" : [ "active", "failed", "committed" ]
          },
          "complete" : {
            "type" : "boolean",
            "default" : false
          }
        },
        "xml" : {
          "name" : "Transaction"
        }
      },
      "AccountType" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "AccountType"
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "username" : {
            "type" : "string"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "phone" : {
            "type" : "string"
          },
          "userStatus" : {
            "type" : "integer",
            "description" : "User Status",
            "format" : "int32"
          }
        },
        "xml" : {
          "name" : "User"
        }
      },
      "Tag" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        },
        "xml" : {
          "name" : "Tag"
        }
      },
      "Account" : {
        "required" : [ "name", "photoUrls" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "accountType" : {
            "$ref" : "#/components/schemas/AccountType"
          },
          "name" : {
            "type" : "string",
            "example" : "Joe Bloggs"
          },
          "photoUrls" : {
            "type" : "array",
            "xml" : {
              "name" : "photoUrl",
              "wrapped" : true
            },
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "xml" : {
              "name" : "tag",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Tag"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "account status",
            "enum" : [ "open", "closed", "pending" ]
          }
        },
        "xml" : {
          "name" : "Account"
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "ErrorModel" : {
        "required" : [ "code", "message" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "account_accountId_body" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Updated name of the account"
          },
          "status" : {
            "type" : "string",
            "description" : "Updated status of the account"
          }
        }
      },
      "accountId_uploadImage_body" : {
        "properties" : {
          "additionalMetadata" : {
            "type" : "string",
            "description" : "Additional data to pass to server"
          },
          "file" : {
            "type" : "string",
            "description" : "file to upload",
            "format" : "binary"
          }
        }
      }
    },
    "securitySchemes" : {
      "fintech_auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://fintech.swagger.io/oauth/dialog",
            "scopes" : {
              "write:accounts" : "modify accounts in your account",
              "read:accounts" : "read your accounts"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    }
  }
}